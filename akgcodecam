#!/usr/bin/python

import codecs
import sys
import os
import argparse
import subprocess
import networkx

# https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.algorithms.shortest_paths.generic.shortest_path.html

try:
    TERM_COLUMNS = int (os.popen ('stty size 2>/dev/null', 'r').read ().split () [1])
    __builtins__.RESET_COLOR = '\033[0m'
    __builtins__.ERROR_COLOR = '\033[91m'
    __builtins__.INFO_COLOR = '\033[92m'
    __builtins__.DEBUG_COLOR = '\033[93m'
    __builtins__.GRAPH_COLOR = '\033[94m'
    __builtins__.STRESS_COLOR = '\033[95m'
except:
    TERM_COLUMNS = 80
    __builtins__.RESET_COLOR = ''
    __builtins__.ERROR_COLOR = ''
    __builtins__.INFO_COLOR = ''
    __builtins__.DEBUG_COLOR = ''
    __builtins__.GRAPH_COLOR = ''
    __builtins__.STRESS_COLOR = ''

__builtins__.STRESS = lambda s: STRESS_COLOR + str(s) + RESET_COLOR
__builtins__.ERROR = lambda s: ERROR_COLOR + str(s) + RESET_COLOR
__builtins__.INFO = lambda s: INFO_COLOR + str(s) + RESET_COLOR
__builtins__.DEBUG = lambda s: DEBUG_COLOR + str(s) + RESET_COLOR
__builtins__.GRAPH = lambda s: GRAPH_COLOR + str(s) + RESET_COLOR

TERM_SEPLINE = "=" * TERM_COLUMNS

PRINTER_IGNORE = ["M190", "M104", "M109", "G21", "M82", "M107", "M117", "M205", "M140", "M106", "M84"]
MODE_ABS = "ABS"
MODE_REL = "REL"
START_XY = (-1, -1)
FINISH_XY = (-2, -2)

def call (cmd_args, **kw):
    print_debug ("About to call: ", cmd_args)
    rc = subprocess.call (cmd_args, **kw)

    print_debug ("The call result for '", type(cmd_args) == str and cmd_args or cmd_args [0], "' is: ", rc)

    return rc

def read_file (filename, encoding = "utf8"):
    """Read entire file."""
    return codecs.open (filename, "r", encoding).read ()

def write_file (filename, content, encoding = "utf8"):
    """Read entire file."""
    return codecs.open (filename, "w", encoding).write (content)

def print_sep():
    print >> sys.stderr, GRAPH_COLOR + TERM_SEPLINE + RESET_COLOR

def print_info(*parts):
    parts = map(str, parts)
    print >> sys.stderr, GRAPH_COLOR + "::::" + INFO_COLOR, "".join(parts).replace(RESET_COLOR, INFO_COLOR) + RESET_COLOR

def print_error(*parts):
    parts = map(str, parts)
    print >> sys.stderr, GRAPH_COLOR + "!!!!" + ERROR_COLOR, "".join(parts).replace(RESET_COLOR, ERROR_COLOR) + RESET_COLOR

def print_debug(*parts):
    if cmd_args.verbose:
        parts = map(str, parts)
        print >> sys.stderr, GRAPH_COLOR + ":::: ... " + DEBUG_COLOR, "".join(parts).replace(RESET_COLOR, DEBUG_COLOR) + DEBUG_COLOR

class Pos:
    def __init__(self, x = None, y = None, z = None, e = None):
        self.x = x
        self.y = y
        self.z = z
        self.e = e

    def subtract(self, other):
        return Delta(dx = self.x - other.x, dy = self.y - other.y, dz = self.z - other.z, de = self.e - other.e)

    def is_defined(self):
        return self.x != None and self.y != None and self.z != None and self.e != None

    def is_home(self):
        return self.x == 0 and self.y == 0 and self.z == 0

    def copy(self, x = None, y = None, z = None, e = None):
        return self.update(MODE_ABS, dx = x, dy = y, dz = z, de = e)

    def update(self, mode, dx = None, dy = None, dz = None, de = None):
        if mode == MODE_REL:
            nx = dx != None and (self.x + dx) or self.x
            ny = dy != None and (self.y + dy) or self.y
            nz = dz != None and (self.z + dz) or self.z
            ne = de != None and (self.e + de) or self.e
            return Pos(x = nx, y = ny, z = nz, e = ne)
        elif mode == MODE_ABS:
            nx = dx != None and dx or self.x
            ny = dy != None and dy or self.y
            nz = dz != None and dz or self.z
            ne = de != None and de or self.e
            return Pos(x = nx, y = ny, z = nz, e = ne)
        else:
            raise ValueError("Mode of operation is unknown: " + mode)

    def __str__(self):
        return "Pos(x = " + str(self.x) + ", y = " + str(self.y) + ", z = " + str(self.z) + ", e=" + str(self.e) + ")"

class Delta:
    def __init__(self, dx = 0, dy = 0, dz = 0, de = 0):
        self.dx = dx
        self.dy = dy
        self.dz = dz
        self.de = de

    def has_xyz_moves(self):
        return self.dx != 0 or self.dy != 0 and self.dz != 0

    def is_extrusion(self):
        return self.de > 0

    def is_retraction(self):
        return self.de < 0

    def __str__(self):
        s = "Delta("
        d = []
        if self.dx != 0: d.append("dx = " + str(self.dx))
        if self.dy != 0: d.append("dy = " + str(self.dy))
        if self.dz != 0: d.append("dz = " + str(self.dz))
        if self.de != 0: d.append("de = " + str(self.de))
        s += ", ".join(d)
        s += ")"
        return s

class Printer:
    def __init__(self):
        self.pos = Pos()
        self.__mode = None

    def state(self):
        return str(self.pos) + " m:" + str(self.__mode)

    def handle(self, line):
        orig_line = line
        line = line.strip().upper()

        if line.startswith(";") or not line:
            return

        if " " in line:
            code, args = line.split(" ", 1)
        else:
            code = line
            args = ""

        def complain_parse(x):
            raise ValueError("What is '" + x + "'. No idea how to parse this line: " + orig_line)

        def strip_comment(s):
            return s.split(";", 1)[0]

        def parse_args():
            return [arg for arg in args and strip_comment(args).split(" ") or [] if arg != ""]

        if code in PRINTER_IGNORE:
            return
        elif code == "G90":
            # Absolute position mode
            self.__mode = MODE_ABS
        elif code == "G91":
            # Relative position mode
            self.__mode = MODE_REL
        elif code == "G28":
            # Home
            pargs = parse_args()
            if pargs == []:
                self.pos = self.pos.copy(x = 0, y = 0, z = 0)
            else:
                for arg in pargs:
                    if arg == "X" or arg == "X0":
                        self.pos = self.pos.copy(x = 0)
                    elif arg == "Y" or arg == "Y0":
                        self.pos = self.pos.copy(y = 0)
                    elif arg == "Z" or arg == "Z0":
                        self.pos = self.pos.copy(z = 0)
                    else:
                        complain_parse(arg)
        elif code == "G1" or code == "G01" or code == "G0" or code == "G00":
            # Move
            pargs = parse_args()

            for arg in pargs:
                if arg.startswith("X"):
                    self.pos = self.pos.update(self.__mode, dx = float(arg[1:]))
                elif arg.startswith("Y"):
                    self.pos = self.pos.update(self.__mode, dy = float(arg[1:]))
                elif arg.startswith("Z"):
                    self.pos = self.pos.update(self.__mode, dz = float(arg[1:]))
                elif arg.startswith("E"):
                    self.pos = self.pos.update(self.__mode, de = float(arg[1:]))
                elif arg.startswith("F"):
                    pass
                else:
                    complain_parse(arg)
        elif code == "G92":
            # Set position (no physical move)
            pargs = parse_args()

            for arg in pargs:
                if arg.startswith("X"):
                    self.pos = self.pos.copy(x = float(arg[1:]))
                elif arg.startswith("Y"):
                    self.pos = self.pos.copy(y = float(arg[1:]))
                elif arg.startswith("Z"):
                    self.pos = self.pos.copy(z = float(arg[1:]))
                elif arg.startswith("E"):
                    self.pos = self.pos.copy(e = float(arg[1:]))
                else:
                    complain_parse(arg)
        else:
            raise ValueError("Unknown G-Code: " + code)

class EventDetector(object):
    def __init__(self, printer):
        self._printer = printer
        self.__initialized = False

    def handle(self, linen, line):
        oldp = self._printer.pos

        self._printer.handle(line)

        if self.__initialized:
            delta = self._printer.pos.subtract(oldp)

            if delta.has_xyz_moves():
                if delta.is_extrusion():
                    self.on_print(linen, oldp, delta)
                elif delta.is_retraction():
                    self.on_retract_move(linen, oldp, delta)
                else:
                    self.on_move(linen, oldp, delta)
            else:
                if delta.is_extrusion():
                    self.on_extrude(linen, oldp, delta)
                elif delta.is_retraction():
                    self.on_retract(linen, oldp, delta)
                else:
                    pass # nothing
        else:
            # Was not initialized, check now
            if self._printer.pos.is_defined():
                self.__initialized = True
                self.on_init(linen)

    def on_init(linen):
        pass

    def on_move(self, linen, oldp, delta):
        pass

    def on_print(self, linen, oldp, delta):
        pass

    def on_retract_move(self, linen, oldp, delta):
        pass

    def on_extrude(self, linen, oldp, delta):
        pass

    def on_retract(self, linen, oldp, delta):
        pass

class Layer:
    def __init__(self):
        self.line_by_xy = {}

    def add(self, x, y, linen):
        self.line_by_xy[(x, y)] = linen

class Layers:
    def __init__(self):
        self.layer_by_z = {}

    def get(self, z):
        if z in self.layer_by_z:
            return self.layer_by_z[z]
        else:
            l = Layer()
            self.layer_by_z[z] = l
            return l

class CamEventDetector(EventDetector):
    def __init__(self, printer):
        super(self.__class__, self).__init__(printer)
        self.layers = Layers()

    def __add_pos(self, linen):
        self.layers.get(self._printer.pos.z).add(self._printer.pos.x, self._printer.pos.y, linen)

    def on_init(self, linen):
        print_debug(linen, ": Initialized.   State", self._printer.state())

    def on_move(self, linen, oldp, delta):
        print_debug(linen, ": Moved. ", STRESS(delta), "   New state: ", self._printer.state())
        self.__add_pos(linen)

    def on_print(self, linen, oldp, delta):
        print_debug(linen, ": Printed. ", STRESS(delta), "   New state: ", self._printer.state())
        self.__add_pos(linen)

    def on_retract_move(self, linen, oldp, delta):
        print_debug(linen, ": Moved and retracted. ", STRESS(delta), "   New state: ", self._printer.state())
        self.__add_pos(linen)

    def on_extrude(self, linen, oldp, delta):
        print_debug(linen, ": Extruded. ", STRESS(delta), "   New state: ", self._printer.state())
        self.__add_pos(linen)

    def on_retract(self, linen, oldp, delta):
        print_debug(linen, ": Retracted. ", STRESS(delta), "   New state: ", self._printer.state())
        self.__add_pos(linen)

    def write_poses_to_file(self, filename):
        print_info("Writing: ", STRESS(filename))

        lines = []

        zs = self.layers.layer_by_z.keys()
        zs.sort()
        for z in zs:
            for x, y in self.layers.get(z).line_by_xy.keys():
                lines.append(str(x) + " " + str(y) + " " + str(z))

        write_file(filename, "\n".join(lines) + "\n")

    def create_graph(self):
        print_info("Create graph...")

        g = networkx.Graph()

        print_info("... adding nodes")
        for l in self.layers.layer_by_z.values():
            for xy in l.line_by_xy.keys():
                g.add_node(xy)

        g.add_node(START_XY)
        g.add_node(FINISH_XY)

        print_info("... adding edges")
        zs = self.layers.layer_by_z.keys()
        zs.sort()

        # Edges for start point
        for xy in self.layers.get(zs[0]).line_by_xy.keys():
            g.add_edge(START_XY, xy)

        # Edges for end point
        for xy in self.layers.get(zs[-1]).line_by_xy.keys():
            g.add_edge(xy, FINISH_XY)

        # Normal edges
        for i in range(0, len(zs) - 1):
            z = zs[i]
            next_z = zs[i+1]

            for xy in self.layers.get(z).line_by_xy.keys():
                for next_xy in self.layers.get(next_z).line_by_xy.keys():
                    g.add_edge(xy, next_xy)

        return g

# ####################################################################

def doit():
    filename = cmd_args.filenames[0]

    print_sep()
    print_info("Processing: ", STRESS(filename))

    printer = Printer()
    event_detector = CamEventDetector(printer)

    lines = read_file(cmd_args.filenames[0]).split("\n")

    # First step, gather info about lines
    i = 0
    for line in lines:
        i += 1
        event_detector.handle(i, line)

    # Write all positions to a file that we will use from gnuplot to draw them
    event_detector.write_poses_to_file(filename + ".dat")

    # Write gnuplot data
    print_info("Writing: ", STRESS(filename + ".gnuplot"))
    gnuplot_content = """
        set term pdf
        set output "xxx.pdf"
        splot 'xxx.dat'
    """.replace("xxx", filename)

    write_file(filename + ".gnuplot", gnuplot_content)
    print_info("Calling gnuplot...")
    call(["gnuplot", filename + ".gnuplot"])

    # Creating networkx graph
    g = event_detector.create_graph()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = 'GCode post-processor by Akshaal')
    parser.add_argument ('-v', dest = 'verbose', action = 'store_const', const = True, default = False, help = 'verbose')
    parser.add_argument ('filenames', metavar = 'FILE', type = str, nargs = 1, help = 'a file to process')

    cmd_args = parser.parse_args()

    doit()
